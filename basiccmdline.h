#ifndef __BASICCMDLINE_H#define __BASICCMDLINE_H#define COMMAND_MAXLEN  255class BASICCMDLINE : public NexusBlock, public Nexus{   // Adding a new data member? Don't forget to:   // 1. Describe it in the class header comment at the top of "emptyblock.cpp"   // 2. Initialize it (unless it is self-initializing) in the constructor   //    and reinitialize it in the Reset function   // 3. Describe the initial state in the constructor documentation   // 4. Delete memory allocated to it in both the destructor and Reset function   // 5. Report it in some way in the Report functionprotected:	bool inf_open;	bool logf_open;	bool quit_now;	ofstream logf;		nxsstring message;	char next_command[COMMAND_MAXLEN+1];		TreesBlock* trees;	TaxaBlock* taxa;	AssumptionsBlock* assumptions;	CharactersBlock* characters;protected:	int CharLabelToNumber( nxsstring s );	bool FileExists( const char* fn );	nxsstring GetFileName( NexusToken& token );	void FactoryDefaults();   void HandleEndblock( NexusToken& token );	void HandleShow( NexusToken& token );	void HandleHelp( NexusToken& token );	void HandleLog( NexusToken& token );	void HandleExecute( NexusToken& token );	void PurgeBlocks();	virtual void Read( NexusToken& token );	virtual void Reset();	int TaxonLabelToNumber( nxsstring s );public:	BASICCMDLINE();   ~BASICCMDLINE();	void EnteringBlock( nxsstring blockName );	void ExitingBlock( nxsstring blockName );	void ExecuteStarting() {}	void ExecuteStopping() {}	void OutputComment( nxsstring ) {}	void HandleNextCommand();	void NexusError( nxsstring& msg, ncl_streampos pos, long line, long col );	void PreprocessNextCommand();	void PrintMessage( bool linefeed = true );	virtual void Report( ostream& out );	void Run();	void SkippingBlock( nxsstring blockName );	void SkippingCommand( nxsstring commandName );	void SkippingDisabledBlock( nxsstring blockName );	virtual bool UserSaysOk( nxsstring mb_message, nxsstring mb_title );};#endif